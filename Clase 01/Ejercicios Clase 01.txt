ejercicio_01.py

"""
Escribir un script que almacene la cadena `Hola Mundo!` en una variable y luego muestre por pantalla
el contenido de la misma.
"""
variable = "Hola mundo!"

print(variable)

print("Script finalizado.")

ejercicio_02.py

"""
Escribir un programa que pregunte el nombre del usuario en la consola y después devuelva un saludo personalizado.
"""
your_name = input("What's your name?: ")

print(f"Un saludo para ti {your_name}!. Tu nombre tiene {len(your_name)} letras!.")

print("Script finalizado.")

"""
Las f-string `f"Texto {algun_codigo}"` son una manera de formatear cadenas en python
que nos permite incluir expresiones de código. Puede ser una simple variable,
una suma o cualquier operación, e incluso llamar a una función que nos devuelva algo y
lo coloque dentro.

En este caso estamo usando la función len() para devolver el número de carácteres que tiene
la variable tipo string 'your_name' (correspondiente a lo que ingresó el usuario).

En versiones más antiguas de Python también podrías encontrar el uso de str.format().
El mismo código en este formato sería:

print("Un saludo para ti {}!. Tu nombre tiene {} letras!.".format(your_name, len(your_name)))

Siendo un solución mucho más verbosa y menos intuitiva.
"""

ejercicio_03.py

"""
Escribe un programa que pregunte al usuario una clave (solo string) y lo compare
con una variable guardada.
Si la clave es correcta, imprime `Bienvenido`, sino, imprime `Clave incorrecta`.
"""
PASSWORD = "thisIsMyBestPass"

user_try = input("Ingrese su contrasenha: ")

if user_try == PASSWORD:
    print("Bienvenido")
else:
    print("Clave incorrecta")


print("Script finalizado.")

"""
Es una buena práctica en Python, declarar las "constantes" en mayúsculas, para dar a entender
que sus valores no deben cambiar en la ejecución del programa.

Sin embargo, debe recordarse que en Python el concepto de constantes no existe como tal,
a diferencia de lenguajes como Javascript, no existe una sintaxis para definir una constante (como const),
y solo es una mera convención para que otros desarrolladores puedan entender las intenciones
del código y evitar errores (después de todo, si intentas cambiar el valor, e incluso el tipo
de dato de PASSWORD el interprete te lo permitirá sin problemas).
"""

ejercicio_04.py

"""
Escribe un programa que pida al usuario un número entero y muestre por pantalla si es par o impar.
"""
user_try = int(input("Dame un numero:"))
is_even_number = (user_try % 2) == 0


if is_even_number:
    print("Es par.")
else:
    print("Es impar.")

print("Script finalizado.")

"""
En este caso, en vez de hacer la comprobación directamente en la condicional (if/else),
guardamos el resultado del operador de igualdad (==) en una variable, y luego, 
utilizamos su resultado.

Recuerda que el resultado de una operación relacional siempre será un booleano (True o False),
y que el if evalúa una condición con resultado booleano (Si x número es igual a y número, si a es mayor que b).
"""

ejercicio_05.py

"""
Escribe un programa que pida al usuario su nombre y su edad, y muestre por
pantalla un mensaje que le diga si es mayor de edad o no.
"""
user_name = input("Cuál es tu nombre?: ")
user_age = int(input("Cuál es tu edad?: "))

if user_age > 18:
    print(f"Bienvenido {user_name}! Con {user_age} ya eres todo un adulto.")

elif user_age == 18:
    print(
        f"Uhmm... no lo sé {user_name}. Con {user_age} anhos recien cumplidos"
        + " no se si dejarte pasar."
    )

else:
    print(
        f"Lo siento {user_name}. Con solo {user_age} anhitos no puedo"
        + " dejarte pasar."
    )

print("Script finalizado.")

"""
Puedes observar como utilizo un operador + para concatenar dos strings
y poder continuarlo en la siguiente línea, evitando así una línea
muy larga en mi código. Es una buena práctica evitar construir lineas
muy alargadas a fin de mejorar la legibilidad, por lo general, el
limite se mantiene entre 80 - 120 caracteres por linea.
"""

how_to.md

# Cómo ejecuto los ejemplos?

Para poder ejecutar los scripts, necesitas tener Python instalado en tu computador, abrir una consola (puede ser powershell, cmd, o cualquier terminal que dispongas), posicionarte en la carpeta donde tengas los ejercicios y ejecutar lo siguiente:

```bash
python ejercicio_01.py
```

Acorde al nombre del ejercicio que quieres probar. Verás en la pantalla el resultado o la interacción del script que estás ejecutando.

Por otro lado, también puedes usar Replit como lo hicimos en clase,
copiar y pegar los scripts y ejecutarlos en `Run`.

## Qué pasaría si...?

A fin de poder realizar código a prueba de errores, el programador debe pensar regularmente que el usuario podría usar mal su código (siendo esto más común de lo que pueda creerse...) así que necesitará gestionar esos errores de alguna manera (es decir, que aunque el usuario haga mal las cosas, el programa sea amigable con el).

Bajo esta premisa, qué pasaría si en el ejercicio 04 el usuario colocara un número con decimales? o si en vez de un número, te pasa una letra o un string que no pueda convertirse explícitamente a número entero? Lo mismo con el ejercicio 5 al preguntar su edad.

La respuesta es clara, el código se rompería, puesto que una de las condiciones de la funciónde converción de tipos int() requiere que su parámetro de entrada sea un elemento que pueda fácilmente convertir a número entero. En este caso, para evitar las aterradoras pantallas de error en Python, podemos "atrapar" el error y dar un comportamiento diferente al script en estos casos con dos keywords propias de Python (pero que cada lenguaje tiene sus propias versiones):
try/except.

Explícitamente, su funcionamiento "intenta" realizar una porción de código (try) y ante cualquier error u excepción ejecuta una respuesta diferente (except). La sintaxis para esto sería:

```py
try:
    user_try = int(input("Dame un numero: "))
except:
    print("No me has dado un numero valido :(")
```

Esto atrapará cualquier error, sin embargo, es recomendable atrapar todos los errores que puedan ocurrir explícitamente y dar una respuesta a cada uno. Por ejemplo, si ejecutas el código sin try/except, el error que verías en consola sería: ValueError: bla bla bla...

De esta forma, podemos dar una excepción única para este error, tal como sigue:

```py
try:
    user_try = int(input("Dame un numero: "))

except ValueError:
    print("No me has dado un numero valido :(")

except:
    print("Esto saltará ante cualquier otro error.")
```

Existe una larga lista de Excepciones en Python, e incluso tú puedes crear tus propias Excepciones (aunque esto es un poco más avanzado). Te recomiendo investigar un poco al respecto, a ver cuantas puedes encontrar (una pista, si en vez de continuar con un script aprietas ctrl + c, verás una excepción con un nombre único también!)

